# This file is part of NIT ( http://www.nitlanguage.org ).
#
# Copyright 2008 Jean Privat <jean@pryen.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

srcdir = .
PROJECT_BINDIR = $(srcdir)/../bin
PROJECT_CSRCDIR = $(srcdir)/../c_src

NITCFLAGS = --semi-global
OLDNITCFLAGS = --semi-global
OBJS = nitc nitpick nit nitdoc nitls nitunit nitpretty nitmetrics nitx nitlight nitdbg_client nitserial nitrestful
SRCS = $(patsubst %,$(srcdir)/%.nit,$(OBJS))
BINS = $(patsubst %,$(PROJECT_BINDIR)/%,$(OBJS))

# Workaround: Cygwin requires peflags to bootstrap
PEFLAGS = peflags
PEFLAGSFLAGS = --cygwin-heap=2048

# To append to the end of a command to ignore if not available (e.g. `$(PEFLAGS)`).
OPTIONAL = || [ "$$?" -eq 127 ]

.PHONY: all
all: $(PROJECT_BINDIR)

.PHONY: pre-build
pre-build: nitc_0
	@echo '***************************************************************'
	@echo '* Compile binaries from NIT source files                      *'
	@echo '***************************************************************'
	$(srcdir)/git-gen-version.sh
	test -d $(PROJECT_BINDIR) || mkdir $(PROJECT_BINDIR)

nitc_0: ../c_src/nitc parser/parser.nit
	@echo '***************************************************************'
	@echo '* Compile nitc_0 from NIT source files                        *'
	@echo '***************************************************************'
	$(srcdir)/git-gen-version.sh
	$(PROJECT_CSRCDIR)/nitc $(OLDNITCFLAGS) -o $(srcdir)/nitc_0 -v $(srcdir)/nitc.nit
	$(PEFLAGS) $(PEFLAGSFLAGS) $(srcdir)/nitc_0 $(OPTIONAL)

# Optimization over the `$(PROJECT_BINDIR)/%` rules when building all tools
# together
$(PROJECT_BINDIR): pre-build
	$(srcdir)/nitc_0 $(NITCFLAGS) -v --dir $(PROJECT_BINDIR) -- $(SRCS)

.PHONY: $(OBJS)
$(OBJS): pre-build
	$(srcdir)/nitc_0 $(NITCFLAGS) -v --dir $(PROJECT_BINDIR) -- $@.nit

$(PROJECT_BINDIR)/%: pre-build
	$(srcdir)/nitc_0 $(NITCFLAGS) -v --dir $(PROJECT_BINDIR) -- $*.nit

$(PROJECT_CSRCDIR)/nitc: $(PROJECT_CSRCDIR)/*.c $(PROJECT_CSRCDIR)/*.h $(PROJECT_CSRCDIR)/Makefile
	@echo '***************************************************************'
	@echo '* Compile nitc from C source files                            *'
	@echo '***************************************************************'
	cd $(PROJECT_CSRCDIR) && $(MAKE)
	rm $(PROJECT_CSRCDIR)/*.o || true # to reduce disc used
	$(PEFLAGS) $(PEFLAGSFLAGS) $(PROJECT_CSRCDIR)/nitc $(OPTIONAL)

$(srcdir)/parser/parser.nit:
	@echo '***************************************************************'
	@echo '* Generate nit parser                                         *'
	@echo '***************************************************************'
	cd $(srcdir)/parser && $(MAKE)


# `clean` `distclean` and `mostlyclean` avoid deleting files usually provided by
# the maintainers.
# `maintainer-clean` deletes all files that can be regenerated by this Makefile.
#
# WARNING: The `maintainer-clean` target is intended for maintainers to use; it
# deletes files that may need special tools to rebuild.
#
# See also: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html
.PHONY: clean distclean mostlyclean maintainer-clean
clean distclean mostlyclean maintainer-clean:
	rm -rf -- $(srcdir)/version.nit $(srcdir)/nitc_0 2> /dev/null || true
	cd $(srcdir)/parser && $(MAKE) $@
